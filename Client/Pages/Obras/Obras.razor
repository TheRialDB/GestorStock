@page "/obras"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject IHttpServicio http


<PageTitle>Obras</PageTitle>

<!DOCTYPE HTML>

<div class="insquare-header">

    <h2 class="obras">Obras</h2>

    <button type="button" class="btn btn-info botones"
            @onclick="() => OpenNuevaObra()">
        +
    </button>
</div>



<head>

    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <link href="/css/Styles/ObrasStyles.css?version=0.1" rel="stylesheet" type="text/css" />

</head>



 <div class="insquare">
    <div class="table-responsive rounded-3">
        <table class="table table-striped table-hover table-bordered text-center">
            <thead id="table-headers">
                <tr>
                    <th>Nro</th>
                    <th>Nombre</th>
                    <th>Estado</th>
                    <th>Direccion</th>
                    <th class="hide"></th>
                    <th class="hide"></th>
                </tr>

                
            </thead>
            <tbody>

                @if (Error)
                {
                    <tr>
                        <td colspan="6">@Mensaje</td>
                    </tr>
                }
                else
                {

                    @if (obras == null)
                    {
                        <tr>Cargando...</tr>
                    }
                    else if (obras.Count == 0)
                    {
                        <tr>No existen los datos</tr>
                    }
                    else
                    {
                        @foreach (var item in obras)
                        {
                            <tr>
                                <td>@item.id</td>
                                <td>@item.nombreObra</td>
                                <td>@item.Estado.nombreEstado</td>
                                <td>@item.direccion</td>
                                <td class="hide">

                                    <i class='bx bxs-edit-alt edit-button' @onclick="() => OpenModificarObra(item.id)"></i>
             
                                </td>
                                <td class="hide">
                                    <i class='bx bx-trash trash-button table-button' @onclick="()=>Eliminar(item)"></i>

                                </td>

                            </tr>
                            <tr class="table-button-row">
                                <td class="table-button-cell"></td>

                                <td class="table-button-cell">

                                    <i class='bx bxs-edit-alt edit-button' @onclick="() => OpenModificarObra(item.id)"></i>

                                </td>

                                <td class="table-button-cell">

                                    <i class='bx bx-trash trash-button table-button' @onclick="()=>Eliminar(item)"></i>

                                </td>

                                <td class="table-button-cell"></td>
                            </tr>

                        }
                    }       
                }

            </tbody>
        </table>
    </div>
    <div class="d-flex">

            @if (NuevaObraOpen)
            {
                <GestorStock.Client.Pages.Obras.Modals.ModalCargar 

                                                             OnClose="@OnNuevaObraClose">

                </GestorStock.Client.Pages.Obras.Modals.ModalCargar>
            }

            @if (ModificarObraOpen)
            {
                <GestorStock.Client.Pages.Obras.Modals.ModalModificar 

                                                               obraid="selectedItemToEditId"
                                                               OnClose="@OnModificarObraClose">

                </GestorStock.Client.Pages.Obras.Modals.ModalModificar>
            }

            <Confirmacion @ref="confirmar"
                       verCancelar="true"
                       verOk="true"
                       onCancel="Cancelar"
                       onConfirm="Borrar">

                <div>
                    <p>Está por borrar el producto @ObraBorrar.nombreObra</p>
                    <br />
                    <p>¿Está seguro que desea continuar?</p>
                </div>
            </Confirmacion>

    </div>
 </div>





@*<Confirmacion @ref='confirmacion'></Confirmacion>*@
@code {


    [Inject]
    private NavigationManager NavigationManager { get; set; }

    Confirmacion confirmar;
    List<Obra>? obras;
    bool Error = false;
    string Mensaje = "";
    Obra ObraBorrar;

    //Confirmacion confirmacion;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        obras = new();
        var respuesta = await http.Get<List<Obra>>("api/Obra"); //GET
        Error = respuesta.Error;
        if (!respuesta.Error)
        {
            obras = respuesta.Respuesta;
        }
        else
        {
            Mensaje = await respuesta.ObtenerError(); //se llama el metodo ut
        }
    }

    private async Task Eliminar (Obra obraBorrar)
    {
        ObraBorrar = obraBorrar;
        confirmar.Ver();
    }
    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Obra/{ObraBorrar.id}");
        if (respuesta.Error)
        {
            var body = "ERROR: no se pudo eliminar";
        }

        Cancelar();
        await Leer();
    }

    private void Cancelar()
    {
        confirmar.Ocultar();
        ObraBorrar = null;
    }


    public bool NuevaObraOpen { get; set; }


    public bool ModificarObraOpen { get; set; }


    private void OpenNuevaObra()
    {
        NuevaObraOpen = true;
        StateHasChanged();
        
    }

    private async Task OnNuevaObraClose(bool accepted)
    {
        NuevaObraOpen = false;
        StateHasChanged();
        await Leer();
    }

    int selectedItemToEditId = -1;

    private void OpenModificarObra(int itemId)
    {
        selectedItemToEditId = itemId;
        ModificarObraOpen = true;
        StateHasChanged();
    }

    private async Task OnModificarObraClose(bool accepted)
    {
        ModificarObraOpen = false;
        StateHasChanged();
        await Leer();
    }
}

