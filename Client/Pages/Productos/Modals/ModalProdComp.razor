@inject IHttpServicio http
@using GestorStock.Client.Pages.Productos

<div class="modal fade show" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display:block; background-color: rgba(10,10,10,.8);">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content" style="color:white">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Cargar producto compuesto</h5>
                <button type="button" class="close;" style=" border-width:0px; background-color: #00000000;" data-dismiss="modal" aria-label="Close" @onclick="@ModalCancel">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

                <FormProdComp prodComp="prodComp" onValidSubmit="Agregar" onCancel="@ModalCancel" prodId="@productoid" prodName="@prodName" />

            </div>
        </div>
    </div>
</div>

@code {
    Producto producto;
    ProductoComponente prodComp = new();
    string Mensaje = "";

    [Parameter] public int productoid { get; set; }

    [Parameter] public string prodName { get; set; }

    [Parameter] public EventCallback<bool> OnClose { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

    }

    private async Task Agregar() //put
    {

        
            ProductoComponenteDTO prodCompDTO = new()
            {
                    ProductoId = prodComp.ProductoId,
                    ComponenteId = prodComp.ComponenteId,
                    cantidad = prodComp.cantidad
             };

             var httpRespuesta = await http.Post<ProductoComponenteDTO>("api/ProductoComponente", prodCompDTO); //post

            if (httpRespuesta.Error)
            {
                var body = httpRespuesta.HttpResponseMessage;
            }

            await OnClose.InvokeAsync(true);
    }

    [Parameter] public int ItemId { get; set; }

    private Task ModalCancel()
    {
        return OnClose.InvokeAsync(false);
    }

}