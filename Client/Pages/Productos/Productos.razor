@page "/Productos"
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]
@inject IHttpServicio http

<PageTitle>Productos</PageTitle>

<!DOCTYPE HTML>

<html>

<head>

    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <link href="/css/Styles/ProductoStyles.css?version=0.1" rel="stylesheet" type="text/css" />

</head>

<body class="align-content-center">

    <div class="insquare-header">

        <h2 class="productos">Productos</h2>

        <button type="button" class="btn btn-info botones"
                @onclick="() => OpenNuevoProducto()">
            +
        </button>

    </div>
    
    <div class="insquare">
        <div class="table-responsive rounded-3">
            <table class="table table-striped table-hover table-bordered text-center">
                <thead id="table-headers">
                    <tr>
                        <th>Codigo</th>
                        <th>Nombre</th>
                        <th>Unidad</th>
                        <th></th>
                        <th></th>
                        <th></th>
                    </tr>

                </thead>
                <tbody>

                    @if (Error)
                    {
                        <tr>@Mensaje</tr>
                    }
                    else
                    {

                        @if (productos == null)
                        {
                            <tr>Cargando...</tr>
                        }
                        else if (productos.Count == 0)
                        {
                            <tr>No existen los datos</tr>
                        }
                        else
                        {
                            @foreach (var item in productos)
                            {
                                <tr>
                                    <td>@item.codigo</td>
                                    <td>@item.nombreProducto</td>
                                    <td>@item.Unidad.nombreUnidad</td>
                                    <td>
                                        <i class='bx bxs-component table-button'></i>

                                    </td>
                                    <td>
                                        <i class='bx bxs-edit-alt edit-button' @onclick="() => OpenModificarProducto(item.id)"></i>
                                    </td>
                                    <td>
                                        <i class='bx bx-trash trash-button table-button' @onclick="()=>Eliminar(item)"></i>

                                    </td>
                                </tr>
                            }
                        }       
                    }
                </tbody>
            </table>
        </div>
        <div class="d-flex">



            @if (NuevoProductoOpen)
            {
                <GestorStock.Client.Pages.Productos.Modals.ModalCargar 
                                                                         OnClose="@OnNuevoProductoClose">
                </GestorStock.Client.Pages.Productos.Modals.ModalCargar>
            }

            @if (ModificarProductoOpen)
            {
                <GestorStock.Client.Pages.Productos.Modals.ModalModificar 
                                                                      productoid="selectedItemToEditId"
                                                                      OnClose="@OnModificarProductoClose">
                </GestorStock.Client.Pages.Productos.Modals.ModalModificar>
            }

            <Confirmacion @ref="confirmar"
                          verCancelar="true"
                          verOk="true"
                          onCancel="Cancelar"
                          onConfirm="Borrar">

                <div>
                    <p>Está por borrar el producto @ProductoBorrar.nombreProducto</p>
                    <br />
                    <p>¿Está seguro que desea continuar?</p>
                </div>
            </Confirmacion>

        </div>
    </div>



</body>

</html>

@code {


    [Inject]
    private NavigationManager NavigationManager { get; set; }

    Confirmacion confirmar;
    List<Producto>? productos;
    bool Error = false;
    string Mensaje = "";
    Producto ProductoBorrar;

    List<Unidad>? unidades;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        productos = null;
        var respuesta = await http.Get<List<Producto>>("api/Producto"); //GET
        Error = respuesta.Error;
        if (!respuesta.Error)
        {
            productos = respuesta.Respuesta;
        }
        else
        {
            Mensaje = await respuesta.ObtenerError(); //se llama el metodo ut
        }
    }

    private async Task Eliminar(Producto obrBorrar)
    {
        ProductoBorrar = obrBorrar;
        confirmar.Ver();
    }
    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Producto/{ProductoBorrar.id}");
        if (respuesta.Error)
        {
            var body = "ERROR: no se pudo eliminar";
        }

        Cancelar();
        await Leer();
    }

    private void Cancelar()
    {
        confirmar.Ocultar();
        ProductoBorrar = null;
    }



    public bool NuevoProductoOpen { get; set; }

    public bool ModificarProductoOpen { get; set; }

    private void OpenNuevoProducto()
    {
        NuevoProductoOpen = true;
        StateHasChanged();

    }

    private async Task OnNuevoProductoClose(bool accepted)
    {
        NuevoProductoOpen = false;
        await Leer();
        StateHasChanged();
    }

    int selectedItemToEditId = -1;

    private void OpenModificarProducto(int itemId)
    {
        selectedItemToEditId = itemId;
        ModificarProductoOpen = true;
        StateHasChanged();
    }

    private async Task OnModificarProductoClose(bool accepted)
    {
        ModificarProductoOpen = false;
        await Leer();
        StateHasChanged();
        
    }
}