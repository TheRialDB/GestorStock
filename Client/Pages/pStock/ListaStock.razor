@page "/stock"
@using GestorStock.BD.Data;
@inject IHttpServicio http
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize]


<PageTitle>Stock</PageTitle>

<div class="insquare-header">


    <h2 class="stock">Stock</h2>

    <button type="button" class="btn btn-info botones"
            @onclick="() => OpenCargarStock()">
        +
    </button>

</div>

<html>

<head>

    <meta charset="utf-8" />
    <meta content="width=device-width, initial-scale=1" name="viewport" />
    <link href="/css/Styles/StockStyles.css" rel="stylesheet" type="text/css" />

</head>

<body class="align-content-center">



  <div class="insquare"> 
    <div class="table-responsive rounded-3">
            <table class="table table-hover table-bordered">
            <thead id="table-headers">
                <tr>
                    <th class="th-cod">Cod</th>
                    <th>Nombre</th>
                    <th class="th-cant">Cantidad</th>
                    <th></th>
                    <th class="hide"></th>
                    <th class="hide"></th>
                </tr>
            </thead>
            <tbody>

                @if (Error)
                {
                    <tr>@Mensaje</tr>
                }
                else
                {

                    @if (stock == null)
                    {
                        <tr>Cargando...</tr>
                    }
                    else if (stock.Count == 0)
                    {
                        <tr>No existen los datos</tr>
                    }
                    else
                    {
                        @foreach (var item in stock)
                        {
                            <tr>
                                <td>@item.Productos.codigo</td>
                                <td>@item.Productos.nombreProducto</td>
                                <td>@item.cantidad</td>
                                <td class="@TextColor(@item.estado)">@item.estado</td>
                                <td class="hide">
                                    <i class='bx bxs-edit-alt edit-button' @onclick="() => OpenModificarStock(item.id)"></i>
                                </td>
                                <td class="hide">
                                    <i class='bx bx-trash trash-button table-button' @onclick="()=>Eliminar(item)"></i>

                                </td>
                            </tr>
                                <tr class="table-button-row">
                                <td></td>
                                <td class="table-button-cell">
                                    <i class='bx bxs-edit-alt edit-button' @onclick="() => OpenModificarStock(item.id)"></i>
                                </td>
                                <td class="table-button-cell"><i class='bx bx-trash trash-button table-button' @onclick="()=>Eliminar(item)"></i></td>
                                <td></td>
                            </tr>
                        }
                    }
                }

            </tbody>
        </table>

        </div>

        @if (CargarStockOpen)
        {
            <GestorStock.Client.Pages.pStock.modals.ModalCargar
                                                         OnClose="@OnCargarStockClose">
            </GestorStock.Client.Pages.pStock.modals.ModalCargar>
        }

        @if (ModificarStockOpen)
        {
            <GestorStock.Client.Pages.pStock.modals.ModalModificar
                                                            stockid=selectedItemToEditId
                                                           OnClose="@OnModificarStockClose">
            </GestorStock.Client.Pages.pStock.modals.ModalModificar>
        }

        <Confirmacion @ref="confirmar"
                      verCancelar="true"
                      verOk="true"
                      onCancel="Cancelar"
                      onConfirm="Borrar">

            <div>
                <p>Está por borrar el producto @StockBorrar.Productos.nombreProducto</p>
                <br />
                <p>¿Está seguro que desea continuar?</p>
            </div>
        </Confirmacion>


    </div>

    <h2 class="text-center header">Todos los depositos</h2>

    <div class="insquare">
        <div class="table-responsive rounded-3">
            <table class="table table-striped table-hover table-bordered">
                <thead id="table-headers">
                    <tr>
                        <th>Codigo</th>
                        <th>Nombre</th>
                        <th>Cantidad</th>
                        <th></th>
                        <th>Deposito</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>3F2 </td>
                        <td>Tornillo (unidad)</td>
                        <td>6</td>
                        <td style="color:lawngreen">D</td>
                        <td>depo 2</td>
                        <td> <i class='bx bxs-edit-alt edit-button'></i> </td>
                        <td> <i class='bx bx-trash trash-button table-button'></i> </td>
                    </tr>
                    <tr>
                        <td>3F2 </td>
                        <td>Tornillo (unidad)</td>
                        <td>6</td>
                        <td style="color:red">N</td>
                        <td>depo 2</td>
                        <td> <i class='bx bxs-edit-alt edit-button'></i> </td>
                        <td> <i class='bx bx-trash trash-button table-button'></i> </td>
                    </tr>
                    <tr>
                        <td>3F2 </td>
                        <td>Tornillo (unidad)</td>
                        <td>6</td>
                        <td style="color:lawngreen">D</td>
                        <td>depo 2</td>
                        <td> <i class='bx bxs-edit-alt edit-button'></i> </td>
                        <td> <i class='bx bx-trash trash-button table-button'></i> </td>
                    </tr>
                    <tr>
                        <td>3F2 </td>
                        <td>Tornillo (unidad)</td>
                        <td>6</td>
                        <td style="color:lawngreen">D</td>
                        <td>depo 2</td>
                        <td> <i class='bx bxs-edit-alt edit-button'></i> </td>
                        <td> <i class='bx bx-trash trash-button table-button'></i> </td>
                    </tr>
                    <tr>
                        <td>3F2 </td>
                        <td>Tornillo (unidad)</td>
                        <td>6</td>
                        <td style="color:lawngreen">D</td>
                        <td>depo 2</td>
                        <td> <i class='bx bxs-edit-alt edit-button'></i> </td>
                        <td> <i class='bx bx-trash trash-button table-button'></i> </td>
                    </tr>
                    <tr>
                        <td>3F2 </td>
                        <td>Tornillo (unidad)</td>
                        <td>6</td>
                        <td style="color:red">N</td>
                        <td>depo 2</td>
                        <td> <i class='bx bxs-edit-alt edit-button'></i> </td>
                        <td> <i class='bx bx-trash trash-button table-button'></i> </td>
                    </tr>
                    <tr>
                        <td>3F2 </td>
                        <td>Tornillo (unidad)</td>
                        <td>6</td>
                        <td style="color:red">N</td>
                        <td>depo 2</td>
                        <td> <i class='bx bxs-edit-alt edit-button'></i> </td>
                        <td> <i class='bx bx-trash trash-button table-button'></i> </td>
                    </tr>
                    <tr>
                        <td>3F2 </td>
                        <td>Tornillo (unidad)</td>
                        <td>6</td>
                        <td style="color:lawngreen">D</td>
                        <td>depo 2</td>
                        <td> <i class='bx bxs-edit-alt edit-button'></i> </td>
                        <td> <i class='bx bx-trash trash-button table-button'></i> </td>
                    </tr>
                    <tr>
                        <td>3F2 </td>
                        <td>Tornillo (unidad)</td>
                        <td>6</td>
                        <td style="color:red">N</td>
                        <td>depo 2</td>
                        <td> <i class='bx bxs-edit-alt edit-button'></i> </td>
                        <td> <i class='bx bx-trash trash-button table-button'></i> </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
</body>
</html>

@code {


    private string TextColor(string color)
    {
       
        switch (color)
        {
            case "D":
                return "disponible"; // Green color
            case "N":
                return "noDisponible"; // Red color
            case "I":
                return "indeterminado"; // Gray color
            default:
                return ""; // Default color
        }
        
    }


    public bool CargarStockOpen { get; set; }

    public bool ModificarStockOpen { get; set; }

    Confirmacion confirmar;
    List<Stock>? stock;
    bool Error = false;
    string Mensaje = "";
    Stock StockBorrar;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Leer();
    }

    private async Task Leer()
    {
        stock = null;
        var respuesta = await http.Get<List<Stock>>("api/Stock"); //GET
        Error = respuesta.Error;
        if (!respuesta.Error)
        {
            stock = respuesta.Respuesta;
        }
        else
        {
            Mensaje = await respuesta.ObtenerError(); //se llama el metodo ut
        }
    }

    private async Task Eliminar(Stock stockBorrar)
    {
        StockBorrar = stockBorrar;
        confirmar.Ver();
    }

    private async Task Borrar()
    {
        var respuesta = await http.Delete($"api/Stock/{StockBorrar.id}");
        if (respuesta.Error)
        {
            var body = "ERROR: no se pudo eliminar";
        }

        Cancelar();
        await Leer();
    }

    private void Cancelar()
    {
        confirmar.Ocultar();
        StockBorrar = null;
    }

    private void OpenCargarStock()
    {
        CargarStockOpen = true;
        StateHasChanged();
    }

    private async Task OnCargarStockClose(bool accepted)
    {
        CargarStockOpen = false;
        await Leer();
        StateHasChanged();
    }

    int selectedItemToEditId = -1;

    private void OpenModificarStock(int itemId)
    {
        selectedItemToEditId = itemId;
        ModificarStockOpen = true;
        StateHasChanged();
    }

    private async Task OnModificarStockClose(bool accepted)
    {
        ModificarStockOpen = false;
        await Leer();
        StateHasChanged();
    }

}
